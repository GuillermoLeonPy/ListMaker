package com.raywenderlich.listmaker.ui.main

import androidx.lifecycle.ViewModelProvider
import android.os.Bundle
import android.preference.PreferenceManager
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.LinearLayoutManager
import com.raywenderlich.listmaker.databinding.FragmentMainBinding
import com.raywenderlich.listmaker.models.TaskList

class MainFragment(val clickListener: MainFragmentInteractionListener) : Fragment(),
    ListSelectionRecyclerViewAdapter.ListSelectionRecyclerViewClickListener{

    interface MainFragmentInteractionListener {
        fun listItemTapped(list: TaskList)
    }
    /* The same name as the res/layout/fragment_main.xml =>  FragmentMain + Binding
    * FragmentMainBinding object has been generated by Android Studio because ViewBinding is enabled
    * Android Studio will do this for every layout in your project, with the binding object containing properties for each View
    * */
    private lateinit var binding: FragmentMainBinding

    companion object {
        //according to he class definition
        fun newInstance(clickListener: MainFragmentInteractionListener) = MainFragment(clickListener)
    }

    private lateinit var viewModel: MainViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        //link to the binding
        binding = FragmentMainBinding.inflate(inflater, container, false)

        //id:lists_recyclerview; object declared in fragment_main.xml
        binding.listsRecyclerview.layoutManager = LinearLayoutManager(requireContext())//something to arrange your items in a linear format

        return binding.root
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        //allows you to share the same ViewModel between different parts of your UI code
        viewModel = ViewModelProvider(requireActivity(),//relationship between Fragments and Activities
        MainViewModelFactory(PreferenceManager.getDefaultSharedPreferences(requireActivity()))).get(MainViewModel::class.java)

        //creating the Adapter once the ViewModel is available
        val recyclerViewAdapter = ListSelectionRecyclerViewAdapter(viewModel.lists, this)
        //assign the adapter to the RecyclerView using the ViewBinding
        binding.listsRecyclerview.adapter = recyclerViewAdapter
        //onListAdded lambda to listen for added lists
        //When a list is added recyclerViewAdapter.listsUpdated() is called
        viewModel.onListAdded = {
            recyclerViewAdapter.listsUpdated()
        }
    }

    //override from interface ListSelectionRecyclerViewAdapter.ListSelectionRecyclerViewClickListener
    //implemented by this class
    override fun listItemClicked(list: TaskList) {
        //clickListener is received as paramenter in the constructor
        clickListener.listItemTapped(list)
    }

}